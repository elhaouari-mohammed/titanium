/// Media Query mixin
/// @link https://github.com/sass-mq/sass-mq/blob/master/_mq.scss
/// @param {String | Boolean} $from (false) - One of $mq-breakpoints
/// @param {String | Boolean} $until (false) - One of $mq-breakpoints
/// @param {String | Boolean} $and (false) - Additional media query parameters
/// @param {String} $media-type ($mq-media-type) - Media type: screen, printâ€¦
///
/// @ignore Undocumented API, for advanced use only:
/// @ignore @param {Map} $breakpoints ($mq-breakpoints)
/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)
///
/// @content styling rules, wrapped into a @media query when $responsive is true
///

/// @requires {Variable} $mq-breakpoints
/// @requires {function} em
/// @requires {function} get-breakpoint
///
///
/// @example scss
///  .element {
///    @include mq($from: small) {
///      color: red;
///    }
///    @include mq($until: medium) {
///      color: blue;
///    }
///    @include mq(mobile, large) {
///      color: green;
///    }
///    @include mq($from: small, $and: '(orientation: landscape)') {
///      color: teal;
///    }
///    @include mq(950px) {
///      color: hotpink;
///    }
///    @include mq(small, $media-type: screen) {
///      color: hotpink;
///    }
///  }
@mixin mq (
    $from: false,
    $until: false,
    $and: false,
    $media-type: 'screen',
    $breakpoints: $mq-breakpoints
) {
    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {
        @if type-of($from) == number {
            $min-width: em($from);
        } @else {
            $min-width: em( get-breakpoint($from, $breakpoints) ) ;
        }
    }

    // Until: that breakpoint (exclusive)
    @if $until {
        @if type-of($until) == number {
            $max-width: em($until);
        } @else {
            $max-width: em( get-breakpoint($until, $breakpoints) - 1 );
        }
    }


    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
    @if $and            { $media-query: '#{$media-query} and #{$and}'; }

    // Remove unnecessary media query prefix 'all and '
    @if ($media-type == 'all' and $media-query != '') {
        $media-type: '';
        $media-query: str-slice(unquote($media-query), 6);
    }

    @media #{$media-type + $media-query} {
        @content;
    }
}